#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Source: http://code.zekjur.net/git/i3status/tree/contrib/wrapper.py
#
# Â© 2012 Valentin Haenel <valentin.haenel@gmx.de>
#
# Updated by Samy Dindane for his needs

import os
import sys
import json
import re
import subprocess

def get_governor():
    """ Get the current governor for cpu0, assuming all CPUs use the same. """
    with open('/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor') as fp:
        return fp.readlines()[0].strip()

def print_line(message):
    """ Non-buffered printing to stdout. """
    sys.stdout.write(message + '\n')
    sys.stdout.flush()

def read_line():
    """ Interrupted respecting reader for stdin. """
    try:
        line = sys.stdin.readline().strip()
        if not line:
            sys.exit(3)
        return line
    except KeyboardInterrupt:
        sys.exit()

if __name__ == '__main__':
    print_line(read_line())
    print_line(read_line())

    while True:
        line, prefix = read_line(), ''
        if line.startswith(','):
            line, prefix = line[1:], ','

        j = json.loads(line)


        # RAM Usage
        command = "free | awk 'NR==2{printf \"MEM: %.0f GiB\", $3/1000, $2/1024/1000, $3*100/$2 }'"
        ram_usage = subprocess.check_output(command, shell=True)
        j.insert(0, {'full_text':  ram_usage, 'name' : 'ram_usage'})

        # CPU Usage
        command = "mpstat -P ALL 1 1 | awk '/Average:/ && $2 ~ /[0-9]/ {printf \"%2.0f% \", $3}'"
        cpu_usage = subprocess.check_output(command, shell=True)[:-1]
        cpu_usage = " ".join(map(lambda p: p[:-1] if (len(p) == 4) else p, cpu_usage.split("\n")))
        j.insert(1, {'full_text': "CPU: " + cpu_usage, 'name' : 'cpu_usage'})

        # Space left on /
        # Space left on /home
        # VPN (the default one doesn't work with PPTP VPNs)
        command = "nmcli c | grep vpn | grep -v -- -- | awk '{print $1}'"
        vpn = ("#DEFAULT", subprocess.check_output(command, shell=True))
        if vpn[1] == "":
            vpn = ("#FF0000", "Off")
        j.insert(4, { 'full_text': "VPN: " + vpn[1].strip(), 'name' : 'vpn', 'color': vpn[0] })

        # Battery status
        # Date
        # Volume

        final_json = prefix+json.dumps(j)

        # Replace the red color (#FF0000) by Solarized's red
        final_json = re.sub('#FF0000','#DC322F', final_json)
        final_json = re.sub('#ff0000','#DC322F', final_json)
        final_json = re.sub('#DEFAULT','#268bd2', final_json)

        print_line(final_json)
